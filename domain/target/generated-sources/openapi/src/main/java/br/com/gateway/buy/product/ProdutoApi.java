/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.gateway.buy.product;

import br.com.gateway.buy.product.Error;
import br.com.gateway.buy.product.Product;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-14T22:57:23.589966-03:00[America/Sao_Paulo]")

@Validated
@Api(value = "produto", description = "the produto API")
public interface ProdutoApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /produto/compras : Returns all faqs from the system that the user has access to
     * Returns all faqs from the system that the user has access to
     *
     * @return faq response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Returns all faqs from the system that the user has access to", nickname = "listCompras", notes = "Returns all faqs from the system that the user has access to", response = Product.class, responseContainer = "List", tags={ "FAQ", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "faq response", response = Product.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/produto/compras",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Product>> listCompras() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /produto/maior-compra/ano/{year} : Returns a user based on a single ID, if the user does not have access to the faq
     * Returns a user based on a single ID, if the user does not have access to the faq
     *
     * @param year ID of faq to fetch (required)
     * @return faq response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Returns a user based on a single ID, if the user does not have access to the faq", nickname = "maiorCompraAno", notes = "Returns a user based on a single ID, if the user does not have access to the faq", response = Product.class, responseContainer = "List", tags={ "FAQ", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "faq response", response = Product.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/produto/maior-compra/ano/{year}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Product>> maiorCompraAno(@ApiParam(value = "ID of faq to fetch",required=true) @PathVariable("year") Integer year) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
